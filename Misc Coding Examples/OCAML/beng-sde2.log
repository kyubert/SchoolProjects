*Function 3.1*

# let v1=[1.0;2.0;4.0];;
val v1 : float list = [1.; 2.; 4.]
# let v2=[3.0;3.0;3.0];;
val v2 : float list = [3.; 3.; 3.]
# let v3=[2.0;2.0;3.0];;
val v3 : float list = [2.; 2.; 3.]
# distanceR2(v1,v2);;
- : float = 6.
#  distanceR2(v1,v3);;
- : float = 2.

*Function 3.2*

# let vset=[v1;v2;v3];;
val vset : float list list = [[1.; 2.; 4.]; [3.; 3.; 3.]; [2.; 2.; 3.]]
# distanceSqAllMeans(v1,vset);;
- : float list = [0.; 6.; 2.]
# let v4=[4.0;1.5;3.0];;
val v4 : float list = [4.; 1.5; 3.]
# distanceSqAllMeans(v4,vset);;
- : float list = [10.25; 3.25; 4.25]

*Function 3.3*

# let v4=[4.0;1.5;3.0];;
val v4 : float list = [4.; 1.5; 3.]
# distanceSqAllMeans(v4,vset);;
- : float list = [10.25; 3.25; 4.25]
# listMinPos(distanceSqAllMeans(v4,vset));;
- : int = 1
# let v5=[0.5;1.2;6.0];;
val v5 : float list = [0.5; 1.2; 6.]
# let vset=[v1;v2;v3;v4;v5];;
val vset : float list list =
  [[1.; 2.; 4.]; [3.; 3.; 3.]; [2.; 2.; 3.]; [4.; 1.5; 3.]; [0.5; 1.2; 6.]]
# listMinPos(distanceSqAllMeans(v4,vset));;
- : int = 3

*Function 3.4*

# elsum(v1,v2);;
- : float list = [4.; 5.; 7.]
# elsum(v4,v5);;
- : float list = [4.5; 2.7; 9.]

*Function 3.5*

# scaleList(v1,6);;
- : float list =
[0.166666666666666657; 0.333333333333333315; 0.66666666666666663]
# scaleList(v2,8);;
- : float list = [0.375; 0.375; 0.375]

*Function 3.6*

# zeroes(4);;
- : float list = [0.; 0.; 0.; 0.]
# zeroes(40);;
- : float list =
[0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.;
 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.;
 0.; 0.]

*Function 3.7*

# zeroMeansSet(3,4);;
- : float list list = [[0.; 0.; 0.; 0.]; [0.; 0.; 0.; 0.]; [0.; 0.; 0.; 0.]]
# zeroMeansSet(10,10);;
- : float list list =
[[0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.];
 [0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.];
 [0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.];
 [0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.];
 [0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.];
 [0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.];
 [0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.];
 [0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.];
 [0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.];
 [0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.]]

*Function 3.8*

# let v6=[0.5;1.2;6.0];;
val v6 : float list = [0.5; 1.2; 6.]
# zeroVdiff(v5,v6);;
- : bool = true
# zeroVdiff(v1,v2);;
- : bool = false

*Function 3.9*

# let vset1=[[1.; 2.; 4.]; [3.; 3.; 3.]; [2.; 2.; 3.]; [4.; 1.5; 3.]; [0.5; 1.2; 6.]];;
val vset1 : float list list =
  [[1.; 2.; 4.]; [3.; 3.; 3.]; [2.; 2.; 3.]; [4.; 1.5; 3.]; [0.5; 1.2; 6.]]
# zeroSetDiff(vset,vset1);;
- : bool = true
# let vset2=[[1.; 2.; 4.]; [3.; 3.; 3.]; [2.; 2.; 3.]; [4.; 1.5; 3.]; [0.5; 1.2; 6.1]];;
val vset2 : float list list =
  [[1.; 2.; 4.]; [3.; 3.; 3.]; [2.; 2.; 3.]; [4.; 1.5; 3.]; [0.5; 1.2; 6.1]]
# zeroSetDiff(vset,vset2);;
- : bool = false

*Function 3.10*

# zeroCounts(6);;
- : int list = [0; 0; 0; 0; 0; 0]
# zeroCounts(50);;
- : int list =
[0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;
 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0]

*Function 3.11*

# updateCounts(4,[1;2;4;8;16;32;64;128]);;
- : int list = [1; 2; 4; 8; 17; 32; 64; 128]
# updateCounts(0, updateCounts(1, updateCounts(2, updateCounts(3, updateCounts(4, zeroCounts(5))))));;
- : int list = [1; 1; 1; 1; 1]

*Function 4.1*

# let v1=[1.0;2.0;4.0];;
val v1 : float list = [1.; 2.; 4.]
# let v2=[3.0;2.0;3.0];;
val v2 : float list = [3.; 2.; 3.]
# let v3=[0.;0.;99.0];;
val v3 : float list = [0.; 0.; 99.]
# updateMeansSum(v1,0,zeroMeansSet(4,3));;
- : float list list =
[[1.; 2.; 4.]; [0.; 0.; 0.]; [0.; 0.; 0.]; [0.; 0.; 0.]]
# updateMeansSum(v1,2,updateMeansSum(v2,1,updateMeansSum(v3,2,zeroMeansSet(4,3))));;
- : float list list =
[[0.; 0.; 0.]; [3.; 2.; 3.]; [1.; 2.; 103.]; [0.; 0.; 0.]]

*Function 4.2*

# formNewMeans([v1;v2;v3],[2;3;4]);;
- : float list list =
[[0.5; 1.; 2.]; [1.; 0.66666666666666663; 1.]; [0.; 0.; 24.75]]
# formNewMeans([v1;v2;v3],[0;0;0]);;
- : float list list = [[1.; 2.; 4.]; [3.; 2.; 3.]; [0.; 0.; 99.]]

*Function 4.3*

# #use "inputs.caml";;
val h : float list list =
 [[47.698002; 62.48]; [-49.005001; -41.327999]; [45.958; 29.403];......]
# let m1=[[0.9999999;1.];[99.0;-99.0]];;
val m1 : float list list = [[0.9999999; 1.]; [99.; -99.]]
# reclassify (h,m1,zeroMeansSet(2,2),zeroCounts(2));;
- : float list list = [[-1.2609399149999998; -1.70065507999999976]; [0.; 0.]]
# let m2=[[-99.;-99.];[0.;0.];[99.;99.]];;
val m2 : float list list = [[-99.; -99.]; [0.; 0.]; [99.; 99.]]
# reclassify (h,m2,zeroMeansSet(3,2),zeroCounts(3));;
- : float list list =
[[-54.3173231846153612; -57.0869230153846];
 [8.32654042528735516; 8.22972401149425];
 [53.2089376458333518; 55.3027706458333341]]

*Function 4.4*

# #use "randomgenerator.caml";;

*test 1*
# let h1=generate(2, 100, 50.);;
val h1 : float list list =
  [[-49.3875157556412958; -41.0316333843107728];
   [-15.6311985331563505; -40.8537473341380846];
   [49.1098954563858427; 9.94349254125471482];
   [10.0216505509500351; 15.0313123338247276];
   [16.3878482828852; 8.70126542849229878];......]
# let m3=generate(2,2,50.);;
val m3 : float list list =
  [[-39.4882782767988445; -4.00856104041616756];
   [-34.2607902683497159; -37.0932695705968456]]
# cmeans(2, h1, m3);;
- : float list list =
[[-1.19419013089192894; 11.9192003624651193];
 [6.37321889324152657; -36.2069951883848802]]

*test 2*
# let h2=generate(2,2000,50.);;
# cmeans(2, h2, m3);;
- : float list list =
[[-1.92272735346625301; 24.7306122612744801];
 [0.0295643452790094637; -25.8155556887562838]]
# let m4=generate(2,4,50.);;
val m4 : float list list =
  [[35.2880254211117617; -1.69245640270277375];
   [-13.0264582615605811; 27.4592405357525564];
   [-18.7876001122642293; -11.8969035082662344];
   [24.6971072715632509; -35.2387574028872]]
# cmeans(4, h2, m4);;
- : float list list =
[[24.0295589357937445; 24.9846582087499662];
 [-26.1656528878939447; 25.038613219463];
 [-24.0317545533652925; -24.9406552899768066];
 [25.9391934495708298; -26.2221776440103866]]

*test 3*
# let h3=generate(4,1000,100.);;
val h3 : float list list =
  [[99.3682759394191208; 22.5266201586417445; 51.5977491547422886;
    74.9840463132114];
   [38.5101763915722728; 26.8048789710757092; 28.5560198647340897;
    -62.0945576467176537];
   [10.0221940897920305; -26.050939483739981; 56.5627620885904463;
    -67.5381106456545837];......]
# let m5=generate(4,2,100.);;
val m5 : float list list =
  [[73.4270423507548; -64.2093042124258; 87.8235807526339;
    56.5787858620957138];
   [75.768320314344308; -53.2646958154947328; -50.0740131783394702;
    -12.8231789639099123]]
# cmeans(2,h3,m5);;
- : float list list =
[[11.5881321337839509; -0.56037323718178611; 49.2850088923424821;
  -2.87347763219958141];
 [-13.7086116123460364; -0.0545023559472277361; -50.9833007663980595;
  3.72063267721888247]]

*test 4*
# let m6=generate(4,4,100.);;
val m6 : float list list =
  [[11.3416412466077574; 12.47993663690802; -59.8602079171828265;
    -72.2182564337848873];
   [18.7646199822922775; 27.3903872942711502; -41.6765542447523387;
    -39.5518956582396513];
   [-90.5201434926092; 3.81208571648756145; -29.9030373005927501;
    -96.9888578914753907];
   [58.2468147543053547; 36.0472207939047067; -22.3881119018331809;
    -17.3825025079562892]]
# cmeans(4,h3,m6);;
- : float list list =
[[51.083488369279074; 4.38306138735082751; -1.19778064647595439;
  -48.7106425589249667];
 [-12.0887103637321136; -2.46392664792260652; -57.5966317203150879;
  44.6755582556831143];
 [-58.3289897729645119; -1.64973800099208612; 12.8152998009570105;
  -45.8423982508950516];
 [16.7155372473504258; -1.56009003787014011; 56.4065242561992051;
  50.6685806134775873]]

*test 5*
# let h4=generate(4,10000,100.);;
# cmeans(4,h4,m6);;
- : float list list =
[[48.3273957994828081; -6.72802600711426368; -52.5603744763301677;
  2.64519520533173047];
 [-50.3640644344260338; -3.45910870085486222; -1.30260743168536686;
  53.2224548682048493];
 [-46.3500823143918197; 5.10405223611683478; -1.23339994476863346;
  -55.6856765821398412];
 [45.8468981224867704; 4.15226589955424163; 56.7277475756768936;
  2.11423803953743938]]


