<!-- Benjamin Golden -->
<!-- 11/29/2016 -->

<!DOCTYPE html>
<html>
<body>

<h1>Benjamin Golden</h1>

<h2>CPSC 4040 Final Project</h2>

<p>steg.cpp uses bit shifting to store values from a given image in another image, text in an image, or an image in text.</p>

<p>First we will test the image in image function.</p>

<img src="sur.jpg"></img>

<p>This is the image in which we are going to store another image.</p>

<img src="small.png"></img>

<p>This is the image which will be stored. Note that the image must have width and height less than half those of the image it is being stored in.</p>

<img src="secretimage.png"></img>

<p>This seems like the exact same image as before, but with any image editor you can find that some of the pixels in the top left corner are very slightly different.</p>

<img src="w1.png"></img>

<img src="extracted.png"></img>

<p>This is the image extracted from the steganographed image. Because of OIIO there is a lot of data loss, but even with that and the static the original image can clearly be seen.</p>

<p>Now we will attempt to store a text file in an image, using the original beach image from before.</p>

<p><font face="courier">This is a text file, text is written here.</font></p>

<img src="secrettext.png"></img>

<p>This is the image in which the text is stored, and here is the extracted text:</p>

<p><font face="courier">This$is$a text$file, text$is$written here.v</font></p>

<p>Again, the text can be read, but there is some data loss from OIIO.</p>

<p>The final use of the program is image in text, which generates a text file hiding the pixel values of a given image.</p>

<img src="t1.png"></img>

<p>This is a sample of the text that was generated by encoding a 64x64 PNG image.</p>

<img src="extractedimage.png"></img>

<p>This is the image extracted from the text.</p>
